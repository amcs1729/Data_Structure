import java.io.*;
import java.util.*;
 
public class B
 {
 	final static int MODULO = 1_000_000_007;
 	static class Reader 
 	{
        final private int BUFFER_SIZE = 1 << 16;
        private DataInputStream din;
        private byte[] buffer;
        private int bufferPointer, bytesRead;
 
        public Reader()
        {
            din = new DataInputStream(System.in);
            if (System.getProperty("ONLINE_JUDGE") == null) 
            {
            try 
            {
                System.setOut(new PrintStream(new FileOutputStream("output.txt")));
                din = new DataInputStream(new FileInputStream("input.txt"));
            }
              catch (Exception e) {
            }
        }
            buffer = new byte[BUFFER_SIZE];
            bufferPointer = bytesRead = 0;
        }
 
        public Reader(String file_name) throws IOException
        {
            din = new DataInputStream(
                new FileInputStream(file_name));
            buffer = new byte[BUFFER_SIZE];
            bufferPointer = bytesRead = 0;
        }
 
        public String readLine() throws IOException
        {
            byte[] buf = new byte[64]; // line length
            int cnt = 0, c;
            while ((c = read()) != -1) {
                if (c == '\n') {
                    if (cnt != 0) {
                        break;
                    }
                    else {
                        continue;
                    }
                }
                buf[cnt++] = (byte)c;
            }
            return new String(buf, 0, cnt);
        }
 
        public int nextInt() throws IOException
        {
            int ret = 0;
            byte c = read();
            while (c <= ' ') {
                c = read();
            }
            boolean neg = (c == '-');
            if (neg)
                c = read();
            do {
                ret = ret * 10 + c - '0';
            } while ((c = read()) >= '0' && c <= '9');
 
            if (neg)
                return -ret;
            return ret;
        }
 
        public long nextLong() throws IOException
        {
            long ret = 0;
            byte c = read();
            while (c <= ' ')
                c = read();
            boolean neg = (c == '-');
            if (neg)
                c = read();
            do {
                ret = ret * 10 + c - '0';
            } while ((c = read()) >= '0' && c <= '9');
            if (neg)
                return -ret;
            return ret;
        }
 
        public double nextDouble() throws IOException
        {
            double ret = 0, div = 1;
            byte c = read();
            while (c <= ' ')
                c = read();
            boolean neg = (c == '-');
            if (neg)
                c = read();
 
            do {
                ret = ret * 10 + c - '0';
            } while ((c = read()) >= '0' && c <= '9');
 
            if (c == '.') {
                while ((c = read()) >= '0' && c <= '9') {
                    ret += (c - '0') / (div *= 10);
                }
            }
 
            if (neg)
                return -ret;
            return ret;
        }
 
        private void fillBuffer() throws IOException
        {
            bytesRead = din.read(buffer, bufferPointer = 0,
                                 BUFFER_SIZE);
            if (bytesRead == -1)
                buffer[0] = -1;
        }
 
        private byte read() throws IOException
        {
            if (bufferPointer == bytesRead)
                fillBuffer();
            return buffer[bufferPointer++];
        }
 
        public void close() throws IOException
        {
            if (din == null)
                return;
            din.close();
        }
    }


//---------------------------------------------------------------------------------------------------------------


    private static long buildtree(long segmentTree[], int idx, int start, int end, long arr[])
    {
    	if(start == end)
    	{
    		segmentTree[idx] = arr[start];
    		return (segmentTree[idx]);
    	}

    	int mid = (end + start)/2;

    	long left = buildtree(segmentTree, 2*idx, start, mid, arr);
    	long right = buildtree(segmentTree, 2*idx + 1, mid+1, end, arr);

    	segmentTree[idx] = left + right;
    	return(segmentTree[idx]);
    }

    private static long rangeSumQuery(long segmentTree[], long lazy[], int idx, int start, int end, int queryRangeStart, int queryRangeEnd)
    {
    	// Do if updates pending
    	if(lazy[idx] != 0)
    	{
    		segmentTree[idx] += ((end- start + 1) *lazy[idx]);
    		if(start != end)  // If it is not leaf, propagate down the lazy update
    		{
    			lazy[2*idx] += lazy[idx];
    			lazy[2*idx + 1] += lazy[idx];
    		}
    		lazy[idx] = 0;
    	}
    	if(start >= queryRangeStart && end <= queryRangeEnd)
    		return(segmentTree[idx]);
    	else if(end < queryRangeStart || start > queryRangeEnd)
    		return 0;
    	else
    	{
    		int mid = (end + start)/2;
    		long leftQuery = rangeSumQuery(segmentTree, lazy, 2*idx, start, mid, queryRangeStart, queryRangeEnd);
    		long rightQuery = rangeSumQuery(segmentTree, lazy, 2*idx+1, mid+1, end, queryRangeStart, queryRangeEnd);
    		return(leftQuery + rightQuery);
    	}
    }

    private static long pointQuery(long segmentTree[] , long lazy[] , int idx, int start, int end, int targetIdx)
    {
    	if(start == end)
    	{
    		// Update if any lazy updates pending
    		segmentTree[idx] += lazy[idx];
    		lazy[idx] = 0;
    		return(segmentTree[idx]);
    	}

    	// Do lazy updates if required
    	segmentTree[idx] += ((end - start + 1)*lazy[idx]);
    	lazy[2*idx] += lazy[idx];
    	lazy[2*idx + 1] += lazy[idx];
    	lazy[idx] = 0;

    	int mid = (start + end)/2;
    	if(targetIdx <= mid)
    	{
    		return(pointQuery(segmentTree, lazy, 2*idx, start, mid, targetIdx));
    	}
    	else 
    	{
    		return(pointQuery(segmentTree, lazy, 2*idx + 1, mid+1, end, targetIdx));
    	}
    }

    private static void rangeUpdate(long segmentTree[], long lazy[], int idx, int start, int end, int updateRangeStart, int updateRangeEnd, int diff)
    {
    	if(start == end)
    	{
    		if(start >= updateRangeStart && start <= updateRangeEnd)
    		{
    			//System.out.println("REACHED LEAF "+start+"   UPDATING IT");
    			segmentTree[idx] += diff;
    		}
    		return;
    	}

    	// No overlap
    	if(end < updateRangeStart || start > updateRangeEnd)
    	{
    		return;
    	}

    	// If current range is completely under update range
    	if(start >= updateRangeStart && end <= updateRangeEnd)
    	{
    		segmentTree[idx] += ((end - start + 1)*diff);
    		lazy[2*idx] += diff;
    		lazy[2*idx+1] += diff;
    		return;
    	}

    	int mid = (start + end)/2;
    	
    	rangeUpdate(segmentTree, lazy, 2*idx, start, mid, updateRangeStart, updateRangeEnd, diff);
    	rangeUpdate(segmentTree, lazy, 2*idx+1 , mid+1, end, updateRangeStart, updateRangeEnd, diff);

    	segmentTree[idx] = segmentTree[2*idx] + segmentTree[2*idx + 1];

    }
 
    public static void main(String[] args) throws IOException
    {
    	Reader read = new Reader();
    	
    	int n = read.nextInt();
    	int q = read.nextInt();

    	long arr[] = new long[n];
    	for(int i = 0; i<n; i++)
    		arr[i] = read.nextLong();


    	long segmentTree[] = new long[4*n + 1];
    	long lazy[] = new long[4*n + 1];
    	buildtree(segmentTree, 1 ,  0, n-1, arr);

    	StringBuilder sb = new StringBuilder();
    	for(int i = 0; i<q; i++)
    	{
    		int type = read.nextInt();
    		
    		if(type == 1)  // Range update
    		{
    			int left = read.nextInt();
    			int right = read.nextInt();
    			int diff = read.nextInt();

    			rangeUpdate(segmentTree, lazy, 1, 0, n-1, left-1, right-1, diff);
    		}
    		else // Point query 
    		{
    			int targetIdx = read.nextInt();
    			sb.append(pointQuery(segmentTree , lazy , 1, 0, n-1, targetIdx-1)).append("\n");
    		}
    	}

    	System.out.println(sb.toString());
    	
    }
}
