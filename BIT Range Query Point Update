import java.io.*;
import java.util.*;
 
public class B
 {
 	final static int MODULO = 1_000_000_007;
 	static class Reader 
 	{
        final private int BUFFER_SIZE = 1 << 16;
        private DataInputStream din;
        private byte[] buffer;
        private int bufferPointer, bytesRead;
 
        public Reader()
        {
            din = new DataInputStream(System.in);
            if (System.getProperty("ONLINE_JUDGE") == null) 
            {
            try 
            {
                System.setOut(new PrintStream(new FileOutputStream("output.txt")));
                din = new DataInputStream(new FileInputStream("input.txt"));
            }
              catch (Exception e) {
            }
        }
            buffer = new byte[BUFFER_SIZE];
            bufferPointer = bytesRead = 0;
        }
 
        public Reader(String file_name) throws IOException
        {
            din = new DataInputStream(
                new FileInputStream(file_name));
            buffer = new byte[BUFFER_SIZE];
            bufferPointer = bytesRead = 0;
        }
 
        public String readLine() throws IOException
        {
            byte[] buf = new byte[64]; // line length
            int cnt = 0, c;
            while ((c = read()) != -1) {
                if (c == '\n') {
                    if (cnt != 0) {
                        break;
                    }
                    else {
                        continue;
                    }
                }
                buf[cnt++] = (byte)c;
            }
            return new String(buf, 0, cnt);
        }
 
        public int nextInt() throws IOException
        {
            int ret = 0;
            byte c = read();
            while (c <= ' ') {
                c = read();
            }
            boolean neg = (c == '-');
            if (neg)
                c = read();
            do {
                ret = ret * 10 + c - '0';
            } while ((c = read()) >= '0' && c <= '9');
 
            if (neg)
                return -ret;
            return ret;
        }
 
        public long nextLong() throws IOException
        {
            long ret = 0;
            byte c = read();
            while (c <= ' ')
                c = read();
            boolean neg = (c == '-');
            if (neg)
                c = read();
            do {
                ret = ret * 10 + c - '0';
            } while ((c = read()) >= '0' && c <= '9');
            if (neg)
                return -ret;
            return ret;
        }
 
        public double nextDouble() throws IOException
        {
            double ret = 0, div = 1;
            byte c = read();
            while (c <= ' ')
                c = read();
            boolean neg = (c == '-');
            if (neg)
                c = read();
 
            do {
                ret = ret * 10 + c - '0';
            } while ((c = read()) >= '0' && c <= '9');
 
            if (c == '.') {
                while ((c = read()) >= '0' && c <= '9') {
                    ret += (c - '0') / (div *= 10);
                }
            }
 
            if (neg)
                return -ret;
            return ret;
        }
 
        private void fillBuffer() throws IOException
        {
            bytesRead = din.read(buffer, bufferPointer = 0,
                                 BUFFER_SIZE);
            if (bytesRead == -1)
                buffer[0] = -1;
        }
 
        private byte read() throws IOException
        {
            if (bufferPointer == bytesRead)
                fillBuffer();
            return buffer[bufferPointer++];
        }
 
        public void close() throws IOException
        {
            if (din == null)
                return;
            din.close();
        }
    }


//---------------------------------------------------------------------------------------------------------------


 
   private static long rangeSum(long BIT[] , int end)
   {
   		long sum = 0;
   		for(int i = end; i>0; i = i - (i & -i))
   		{
   			sum += BIT[i];
   		}
   		return(sum);
   }
 
   private static void pointUpdate(long BIT[], int idx, long diff)
   {
   		for(int i = idx; i<BIT.length; i = i + (i & -i))
   		{
   			BIT[i] += diff;
   		}
   }
 
    public static void main(String[] args) throws IOException
    {
    	Reader read = new Reader();
    	StringBuilder sb = new StringBuilder();
    	int n = read.nextInt();
    	int q = read.nextInt();
 
    	long arr[] = new long[n+1];
    	for(int i = 1; i<=n; i++)
    		arr[i] = read.nextLong();
 
 
    	long BIT[] = new long[n+1];
    	for(int i = 1; i<arr.length; i++)
    		pointUpdate(BIT, i, arr[i]);
    	// System.out.println(Arrays.toString(arr));
    	// System.out.println(Arrays.toString(BIT));
    	for(int i = 0; i<q; i++)
    	{
    		int type = read.nextInt();
    		if(type == 1)  // Point update query
    		{
    			int idx = read.nextInt();
    			long newVal = read.nextLong();
    			long diff = newVal - arr[idx];
    			arr[idx] = newVal;
    			pointUpdate(BIT, idx, diff);
    		}
    		else
    		{
    			int left = read.nextInt();
    			int right = read.nextInt();
    			long rightSum = rangeSum(BIT, right);
    			long leftSum = left == 1 ? 0 : rangeSum(BIT, left-1);
    			long ans = rightSum - leftSum;
    			sb.append(ans).append("\n");
    		}
    	}
 
    	System.out.println(sb.toString());
    	
    }
}
